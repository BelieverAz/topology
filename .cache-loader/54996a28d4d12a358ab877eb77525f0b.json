{"remainingRequest":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js??ref--6-oneOf-1-1!/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js??ref--6-oneOf-1-2!/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js??ref--5-0!/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/selectNodes.ts","dependencies":[{"path":"/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/selectNodes.ts","mtime":1647506177154},{"path":"/Users/zhangtengjin/Desktop/byai/topology/package.json","mtime":1647506605470},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/cache-loader/dist/cjs.js","mtime":1645756501487},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js","mtime":1645756504722},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js","mtime":1641784542889},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js","mtime":1643179601592}],"contextDependencies":[],"result":["import _toConsumableArray from\"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable no-debugger */import _ from'lodash';export var SelectMode;(function(SelectMode){SelectMode[SelectMode[\"NORMAL\"]=0]=\"NORMAL\";SelectMode[SelectMode[\"MUL_NORMAL\"]=1]=\"MUL_NORMAL\";SelectMode[SelectMode[\"MULTI\"]=2]=\"MULTI\";SelectMode[SelectMode[\"RIGHT_NORMAL\"]=3]=\"RIGHT_NORMAL\";})(SelectMode||(SelectMode={}));function getChildren(parent,lines){return lines.map(function(item){var _item$start$split=item.start.split('-'),_item$start$split2=_slicedToArray(_item$start$split,1),_parent=_item$start$split2[0];if(_parent===parent){return item.end;}return null;}).filter(function(item){return item!==null;});}function getParents(child,lines){return lines.map(function(item){var _item$start$split3=item.start.split('-'),_item$start$split4=_slicedToArray(_item$start$split3,1),parent=_item$start$split4[0];if(item.end===child){return parent;}return null;}).filter(function(item){return item!==null;});}/** 取消选中节点 */function cancelSelect(params){var selectedData=params.selectedData,mode=params.mode,node=params.node;if(mode===SelectMode.NORMAL){return{nodes:[],lines:[]};}var lines=selectedData.lines.filter(function(item){if(item.end===node.id){return false;}if(item.start.split('-')[0]===node.id){return false;}return true;});var nodes;if(mode===SelectMode.MUL_NORMAL){nodes=selectedData.nodes.filter(function(item){return item.id!==node.id;});}else{var filterArray=[].concat(_toConsumableArray(getChildren(node.id,selectedData.lines)),[node.id]);nodes=selectedData.nodes.filter(function(item){return filterArray.indexOf(item.id)===-1;});}return{nodes:nodes,lines:lines};}/**\n * 选中规则：\n * 1. CTRL/COMMAND: 选中当前节点，并同时选中在已选节点中与当前节点呈父子关系的连线\n * 2. CTRL/COMMAND + SHIFT: 选中当前节点，并同时选中子节点及同子节点的连线\n */var selectNodes=function selectNodes(_ref){var data=_ref.data,selectedData=_ref.selectedData;function hasSelected(node){return selectedData.nodes.find(function(item){return item.id===node.id;})!==undefined;}return function(_ref2){var node=_ref2.node,mode=_ref2.mode;if(hasSelected(node)){return cancelSelect({selectedData:selectedData,mode:mode,node:node});}var children=getChildren(node.id,data.lines);var parents=getParents(node.id,data.lines);var selectNodesId=selectedData.nodes.map(function(item){return item.id;});var selectedChildren=_.intersection(children,selectNodesId);var selectedParents=_.intersection(parents,selectNodesId);if(mode===SelectMode.NORMAL||mode===SelectMode.RIGHT_NORMAL){return{nodes:[node],lines:[]};}if(mode===SelectMode.MUL_NORMAL){var selectlines=data.lines.filter(function(item){var _item$start$split5=item.start.split('-'),_item$start$split6=_slicedToArray(_item$start$split5,1),parent=_item$start$split6[0];// 当前节点为父节点，并且子节点为已选择状态，则选中当前线段\nif(parent===node.id&&selectedChildren.indexOf(item.end)>-1){return true;}// 当前节点为子节点，并且父节点为已选择状态，则选中当前线段\nif(item.end===node.id&&selectedParents.indexOf(parent)>-1){return true;}return false;});return{nodes:[].concat(_toConsumableArray(selectedData.nodes),[node]),lines:[].concat(_toConsumableArray(selectedData.lines),_toConsumableArray(selectlines))};}// 复选模式下选中节点同时选中节点的子节点及关系线段\nvar unSelectedChildren=_.difference(children,selectedChildren);var lines=data.lines.filter(function(item){var _item$start$split7=item.start.split('-'),_item$start$split8=_slicedToArray(_item$start$split7,1),parent=_item$start$split8[0];if(_.some(selectedData.lines,item)){return false;}// 当前节点为子节点，并且父节点为已选择状态，则选中当前线段\nif(item.end===node.id&&selectedParents.indexOf(parent)>-1){return true;}if(parent===node.id&&unSelectedChildren.indexOf(item.end)>-1){return true;}return false;});var nodes=data.nodes.filter(function(item){return unSelectedChildren.indexOf(item.id)>-1;});return{nodes:[].concat(_toConsumableArray(selectedData.nodes),[node],_toConsumableArray(nodes)),lines:[].concat(_toConsumableArray(selectedData.lines),_toConsumableArray(lines))};};};export default selectNodes;",{"version":3,"sources":["/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/selectNodes.ts"],"names":["_","SelectMode","getChildren","parent","lines","map","item","start","split","_parent","end","filter","getParents","child","cancelSelect","params","selectedData","mode","node","NORMAL","nodes","id","MUL_NORMAL","filterArray","indexOf","selectNodes","data","hasSelected","find","undefined","children","parents","selectNodesId","selectedChildren","intersection","selectedParents","RIGHT_NORMAL","selectlines","unSelectedChildren","difference","some"],"mappings":"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","sourcesContent":["/* eslint-disable no-debugger */\nimport _ from 'lodash';\nimport { ITopologyData, ITopologyNode, ITopologyLine } from '../declare';\n\ninterface PremiseParams {\n    data: ITopologyData;\n    selectedData: ITopologyData;\n}\n\nexport enum SelectMode {\n    NORMAL,\n    MUL_NORMAL,\n    MULTI,\n    RIGHT_NORMAL,\n}\n\nexport interface ProduceselectedDataFunc {\n    (params: {\n        node: ITopologyNode;\n        mode: SelectMode;\n    }): ITopologyData;\n}\n\ninterface SelectNodesFunc {\n    (param: PremiseParams): ProduceselectedDataFunc;\n}\n\nfunction getChildren(parent: string, lines: ITopologyLine[]) {\n    return lines.map((item) => {\n        const [_parent] = item.start.split('-');\n        if (_parent === parent) {\n            return item.end;\n        }\n        return null;\n    }).filter(item => item !== null);\n}\n\nfunction getParents(child: string, lines: ITopologyLine[]) {\n    return lines.map((item) => {\n        const [parent] = item.start.split('-');\n        if (item.end === child) {\n            return parent;\n        }\n        return null;\n    }).filter(item => item !== null);\n}\n\n/** 取消选中节点 */\nfunction cancelSelect(params: {\n    selectedData: ITopologyData;\n    mode: SelectMode;\n    node: ITopologyNode;\n}) {\n    const {\n        selectedData,\n        mode,\n        node,\n    } = params;\n    if (mode === SelectMode.NORMAL) {\n        return { nodes: [], lines: [] };\n    }\n    const lines = selectedData.lines.filter((item) => {\n        if (item.end === node.id) {\n            return false;\n        }\n        if (item.start.split('-')[0] === node.id) {\n            return false;\n        }\n        return true;\n    });\n    let nodes;\n    if (mode === SelectMode.MUL_NORMAL) {\n        nodes = selectedData.nodes.filter(item => item.id !== node.id);\n    } else {\n        const filterArray = [...getChildren(node.id, selectedData.lines), node.id];\n        nodes = selectedData.nodes.filter(item => filterArray.indexOf(item.id) === -1);\n    }\n    return { nodes, lines };\n}\n\n/**\n * 选中规则：\n * 1. CTRL/COMMAND: 选中当前节点，并同时选中在已选节点中与当前节点呈父子关系的连线\n * 2. CTRL/COMMAND + SHIFT: 选中当前节点，并同时选中子节点及同子节点的连线\n */\nconst selectNodes: SelectNodesFunc = ({ data, selectedData }) => {\n    function hasSelected(node: ITopologyNode) {\n        return selectedData.nodes.find(item => item.id === node.id) !== undefined;\n    }\n\n    return ({ node, mode }) => {\n        if (hasSelected(node)) {\n            return cancelSelect({ selectedData, mode, node });\n        }\n        const children = getChildren(node.id, data.lines);\n        const parents = getParents(node.id, data.lines);\n        const selectNodesId = selectedData.nodes.map(item => item.id);\n        const selectedChildren = _.intersection(children, selectNodesId);\n        const selectedParents = _.intersection(parents, selectNodesId);\n\n        if (mode === SelectMode.NORMAL || mode === SelectMode.RIGHT_NORMAL) {\n            return {\n                nodes: [node],\n                lines: [],\n            };\n        }\n        if (mode === SelectMode.MUL_NORMAL) {\n            const selectlines = data.lines.filter((item) => {\n                const [parent] = item.start.split('-');\n                // 当前节点为父节点，并且子节点为已选择状态，则选中当前线段\n                if (parent === node.id && selectedChildren.indexOf(item.end) > -1) {\n                    return true;\n                }\n                // 当前节点为子节点，并且父节点为已选择状态，则选中当前线段\n                if (item.end === node.id && selectedParents.indexOf(parent) > -1) {\n                    return true;\n                }\n                return false;\n            });\n            return {\n                nodes: [...selectedData.nodes, node],\n                lines: [...selectedData.lines, ...selectlines],\n            };\n        }\n        // 复选模式下选中节点同时选中节点的子节点及关系线段\n        const unSelectedChildren = _.difference(children, selectedChildren);\n        const lines = data.lines.filter((item) => {\n            const [parent] = item.start.split('-');\n            if (_.some(selectedData.lines, item)) {\n                return false;\n            }\n            // 当前节点为子节点，并且父节点为已选择状态，则选中当前线段\n            if (item.end === node.id && selectedParents.indexOf(parent) > -1) {\n                return true;\n            }\n            if (parent === node.id && unSelectedChildren.indexOf(item.end) > -1) {\n                return true;\n            }\n            return false;\n        });\n        const nodes = data.nodes.filter(item => unSelectedChildren.indexOf(item.id) > -1);\n        return {\n            nodes: [\n                ...selectedData.nodes,\n                node,\n                ...nodes,\n            ],\n            lines: [...selectedData.lines, ...lines],\n        };\n    };\n};\n\nexport default selectNodes;\n"]}]}