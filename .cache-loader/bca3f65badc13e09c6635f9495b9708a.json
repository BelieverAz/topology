{"remainingRequest":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js??ref--6-oneOf-1-1!/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js??ref--6-oneOf-1-2!/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js??ref--5-0!/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/deleteSelectedData.ts","dependencies":[{"path":"/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/deleteSelectedData.ts","mtime":1647506177153},{"path":"/Users/zhangtengjin/Desktop/byai/topology/package.json","mtime":1647506605470},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/cache-loader/dist/cjs.js","mtime":1645756501487},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js","mtime":1645756504722},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js","mtime":1641784542889},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js","mtime":1643179601592}],"contextDependencies":[],"result":["import _toConsumableArray from\"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";import _ from'lodash';export default function deleteSelectedData(data,selectedData){var deleteNodes=selectedData.nodes;var deleteNodesIdMap=deleteNodes.map(function(item){return item.id;}).reduce(function(pre,cur){return _objectSpread({},pre,_defineProperty({},cur,cur));},{});var shouldDeleteLines=data.lines.filter(function(item){var _item$start$split=item.start.split('-'),_item$start$split2=_slicedToArray(_item$start$split,1),parent=_item$start$split2[0];var child=item.end;if(deleteNodesIdMap[parent]||deleteNodesIdMap[child]){return true;}return false;});var deleteLines=_.uniqWith([].concat(_toConsumableArray(shouldDeleteLines),_toConsumableArray(selectedData.lines)),_.isEqual);return{nodes:_.differenceBy(data.nodes,deleteNodes,'id'),lines:_.differenceWith(data.lines,deleteLines,_.isEqual)};}",{"version":3,"sources":["/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/deleteSelectedData.ts"],"names":["_","deleteSelectedData","data","selectedData","deleteNodes","nodes","deleteNodesIdMap","map","item","id","reduce","pre","cur","shouldDeleteLines","lines","filter","start","split","parent","child","end","deleteLines","uniqWith","isEqual","differenceBy","differenceWith"],"mappings":"woBAAA,MAAOA,CAAAA,CAAP,KAAc,QAAd,CAGA,cAAe,SAASC,CAAAA,kBAAT,CAA4BC,IAA5B,CAAiDC,YAAjD,CAA8E,CACzF,GAAMC,CAAAA,WAAW,CAAGD,YAAY,CAACE,KAAjC,CAEA,GAAMC,CAAAA,gBAAgB,CAAGF,WAAW,CAC/BG,GADoB,CAChB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,EAAT,EADY,EAEpBC,MAFoB,CAEb,SAACC,GAAD,CAAMC,GAAN,0BAAoBD,GAApB,oBAA0BC,GAA1B,CAAgCA,GAAhC,IAFa,CAE2B,EAF3B,CAAzB,CAGA,GAAMC,CAAAA,iBAAiB,CAAGX,IAAI,CAACY,KAAL,CAAWC,MAAX,CAAkB,SAACP,IAAD,CAAU,uBACjCA,IAAI,CAACQ,KAAL,CAAWC,KAAX,CAAiB,GAAjB,CADiC,wDAC3CC,MAD2C,uBAElD,GAAMC,CAAAA,KAAK,CAAGX,IAAI,CAACY,GAAnB,CACA,GAAId,gBAAgB,CAACY,MAAD,CAAhB,EAA4BZ,gBAAgB,CAACa,KAAD,CAAhD,CAAyD,CACrD,MAAO,KAAP,CACH,CACD,MAAO,MAAP,CACH,CAPyB,CAA1B,CAQA,GAAME,CAAAA,WAAW,CAAGrB,CAAC,CAACsB,QAAF,8BAAeT,iBAAf,qBAAqCV,YAAY,CAACW,KAAlD,GAA0Dd,CAAC,CAACuB,OAA5D,CAApB,CAEA,MAAO,CACHlB,KAAK,CAAEL,CAAC,CAACwB,YAAF,CAAetB,IAAI,CAACG,KAApB,CAA2BD,WAA3B,CAAwC,IAAxC,CADJ,CAEHU,KAAK,CAAEd,CAAC,CAACyB,cAAF,CAAiBvB,IAAI,CAACY,KAAtB,CAA6BO,WAA7B,CAA0CrB,CAAC,CAACuB,OAA5C,CAFJ,CAAP,CAIH","sourcesContent":["import _ from 'lodash';\nimport { ITopologyData } from '../declare';\n\nexport default function deleteSelectedData(data: ITopologyData, selectedData: ITopologyData) {\n    const deleteNodes = selectedData.nodes;\n\n    const deleteNodesIdMap = deleteNodes\n        .map(item => item.id)\n        .reduce((pre, cur) => ({ ...pre, [cur]: cur }), {});\n    const shouldDeleteLines = data.lines.filter((item) => {\n        const [parent] = item.start.split('-');\n        const child = item.end;\n        if (deleteNodesIdMap[parent] || deleteNodesIdMap[child]) {\n            return true;\n        }\n        return false;\n    });\n    const deleteLines = _.uniqWith([...shouldDeleteLines, ...selectedData.lines], _.isEqual);\n\n    return {\n        nodes: _.differenceBy(data.nodes, deleteNodes, 'id'),\n        lines: _.differenceWith(data.lines, deleteLines, _.isEqual),\n    };\n}\n"]}]}