{"remainingRequest":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js??ref--6-oneOf-1-1!/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js??ref--6-oneOf-1-2!/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js??ref--5-0!/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/computeLayout.ts","dependencies":[{"path":"/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/computeLayout.ts","mtime":1647506177153},{"path":"/Users/zhangtengjin/Desktop/byai/topology/package.json","mtime":1647506605470},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/cache-loader/dist/cjs.js","mtime":1645756501487},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js","mtime":1645756504722},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js","mtime":1641784542889},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js","mtime":1643179601592}],"contextDependencies":[],"result":["/* eslint-disable no-debugger */ /* eslint-disable no-param-reassign */import _ from'lodash';import{onlyOneParent,onlyOneRoot,convertToTree}from'./tree';import{getNodeSize}from'.';import config from'../config';function computeClientRect(node){node.clientRect=getNodeSize(node.id);return node;}function getTreeNode(data){if(data.nodes.length<=0){return null;}// 不满足树的条件\nif(!onlyOneParent(data)||!onlyOneRoot(data)){return null;}// 将数组转为树结构，并获取节点的dom大小\nreturn convertToTree(data,computeClientRect);}function computeContainerSize(node){var children=node.childrenList;if(Array.isArray(node.childrenList)){var childrenSize=children.map(computeContainerSize);var horizontalSpacing=(childrenSize.length-1)*config.autoLayout.horizontalSpacing;var childrenWidth=_.sumBy(childrenSize,'width');var childrenHeight=_.maxBy(childrenSize,'height').height;node.containerRect={width:Math.max(node.clientRect.width,childrenWidth+horizontalSpacing),height:node.clientRect.height+childrenHeight+config.autoLayout.verticalSpacing};}else{node.containerRect={width:node.clientRect.width,height:node.clientRect.height};}return _.cloneDeep(node.containerRect);}function computePosition(node,containerPosition,sortChildren){var containerRect=node.containerRect;var nodeWidth=node.clientRect.width;var nodeHeight=node.clientRect.height;node.position={// 把节点移动到容器框的中间位置\nx:containerPosition.x+(containerRect.width-nodeWidth)/2,y:containerPosition.y};if(Array.isArray(node.childrenList)){if(sortChildren){node.childrenList=sortChildren(node,node.childrenList);}var childrenWidth=node.childrenList.reduce(function(pre,cur){return pre+cur.containerRect.width;},(node.childrenList.length-1)*config.autoLayout.horizontalSpacing);var childrenPositionY=node.position.y+nodeHeight+config.autoLayout.verticalSpacing;var childrenPositionX=containerPosition.x+(containerRect.width-childrenWidth)/2;for(var i=0;i<node.childrenList.length;i+=1){var chlid=node.childrenList[i];computePosition(chlid,{x:childrenPositionX,y:childrenPositionY},sortChildren);childrenPositionX+=chlid.containerRect.width+config.autoLayout.horizontalSpacing;}}}function convertTreeToArray(treeNode){var nodes=[treeNode];for(var i=0;i<nodes.length;i+=1){var _childrenList=nodes[i].childrenList;// 删除为计算布局添加的额外属性\ndelete nodes[i].childrenList;delete nodes[i].clientRect;delete nodes[i].containerRect;if(Array.isArray(_childrenList)){_childrenList.forEach(function(item){return nodes.push(item);});}}return nodes;}function computeLayout(data,options){var tree=getTreeNode(data);if(!tree){return data.nodes;}var containerSize=computeContainerSize(tree);var position={x:(config.canvas.width-containerSize.width)/2,y:(config.canvas.height-containerSize.height)/2};computePosition(tree,position,options?options.sortChildren:undefined);return convertTreeToArray(tree);}export default computeLayout;",{"version":3,"sources":["/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/computeLayout.ts"],"names":["_","onlyOneParent","onlyOneRoot","convertToTree","getNodeSize","config","computeClientRect","node","clientRect","id","getTreeNode","data","nodes","length","computeContainerSize","children","childrenList","Array","isArray","childrenSize","map","horizontalSpacing","autoLayout","childrenWidth","sumBy","childrenHeight","maxBy","height","containerRect","width","Math","max","verticalSpacing","cloneDeep","computePosition","containerPosition","sortChildren","nodeWidth","nodeHeight","position","x","y","reduce","pre","cur","childrenPositionY","childrenPositionX","i","chlid","convertTreeToArray","treeNode","forEach","item","push","computeLayout","options","tree","containerSize","canvas","undefined"],"mappings":"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","sourcesContent":["/* eslint-disable no-debugger */\n/* eslint-disable no-param-reassign */\nimport _ from 'lodash';\nimport { ITopologyData, ITopologyNode, IPosition } from '../declare';\nimport {\n    onlyOneParent,\n    onlyOneRoot,\n    convertToTree,\n} from './tree';\nimport { getNodeSize } from '.';\nimport config from '../config';\n\ntype SortChilren = (parent: ITopologyNode, childrenList: ITopologyNode[]) => ITopologyNode[];\n\ninterface LayoutOptions {\n    sortChildren?: SortChilren;\n}\n\ninterface RectSize {\n    width: number;\n    height: number;\n}\n\ninterface ContainerRect extends RectSize {\n    position?: IPosition;\n}\n\ninterface TreeNode extends ITopologyNode {\n    clientRect?: ClientRect;\n    containerRect?: ContainerRect;\n    childrenList?: ITopologyNode[];\n}\n\nfunction computeClientRect(node: TreeNode) {\n    node.clientRect = getNodeSize(node.id);\n    return node;\n}\n\nfunction getTreeNode(data: ITopologyData): TreeNode | null {\n    if (data.nodes.length <= 0) {\n        return null;\n    }\n    // 不满足树的条件\n    if (!onlyOneParent(data) || !onlyOneRoot(data)) {\n        return null;\n    }\n    // 将数组转为树结构，并获取节点的dom大小\n    return convertToTree(data, computeClientRect);\n}\n\nfunction computeContainerSize(node: TreeNode): RectSize {\n    const children = node.childrenList;\n\n    if (Array.isArray(node.childrenList)) {\n        const childrenSize = children.map(computeContainerSize);\n        const horizontalSpacing = (childrenSize.length - 1) * config.autoLayout.horizontalSpacing;\n        const childrenWidth = _.sumBy(childrenSize, 'width');\n        const childrenHeight = _.maxBy(childrenSize, 'height').height;\n\n        node.containerRect = {\n            width: Math.max(node.clientRect.width, childrenWidth + horizontalSpacing),\n            height: node.clientRect.height + childrenHeight + config.autoLayout.verticalSpacing,\n        };\n    } else {\n        node.containerRect = {\n            width: node.clientRect.width,\n            height: node.clientRect.height,\n        };\n    }\n    return _.cloneDeep(node.containerRect);\n}\n\nfunction computePosition(node: TreeNode, containerPosition: IPosition, sortChildren?: SortChilren) {\n    const { containerRect } = node;\n    const nodeWidth = node.clientRect.width;\n    const nodeHeight = node.clientRect.height;\n\n    node.position = {\n        // 把节点移动到容器框的中间位置\n        x: containerPosition.x + (containerRect.width - nodeWidth) / 2,\n        y: containerPosition.y,\n    };\n    if (Array.isArray(node.childrenList)) {\n        if (sortChildren) {\n            node.childrenList = sortChildren(node, node.childrenList);\n        }\n        const childrenWidth = node.childrenList.reduce(\n            (pre, cur) => pre + cur.containerRect.width,\n            (node.childrenList.length - 1) * config.autoLayout.horizontalSpacing,\n        );\n        const childrenPositionY = node.position.y + nodeHeight + config.autoLayout.verticalSpacing;\n        let childrenPositionX = containerPosition.x + (containerRect.width - childrenWidth) / 2;\n        for (let i = 0; i < node.childrenList.length; i += 1) {\n            const chlid = node.childrenList[i];\n            computePosition(\n                chlid,\n                { x: childrenPositionX, y: childrenPositionY },\n                sortChildren,\n            );\n            childrenPositionX += (chlid.containerRect.width + config.autoLayout.horizontalSpacing);\n        }\n    }\n}\n\nfunction convertTreeToArray(treeNode: TreeNode): ITopologyNode[] {\n    const nodes: ITopologyNode[] = [treeNode];\n    for (let i = 0; i < nodes.length; i += 1) {\n        const { childrenList } = nodes[i];\n        // 删除为计算布局添加的额外属性\n        delete nodes[i].childrenList;\n        delete nodes[i].clientRect;\n        delete nodes[i].containerRect;\n        if (Array.isArray(childrenList)) {\n            childrenList.forEach(item => nodes.push(item));\n        }\n    }\n    return nodes;\n}\n\nfunction computeLayout(data: ITopologyData, options: LayoutOptions) {\n    const tree = getTreeNode(data);\n    if (!tree) {\n        return data.nodes;\n    }\n    const containerSize = computeContainerSize(tree);\n    const position = {\n        x: (config.canvas.width - containerSize.width) / 2,\n        y: (config.canvas.height - containerSize.height) / 2,\n    };\n    computePosition(tree, position, options ? options.sortChildren : undefined);\n    return convertTreeToArray(tree);\n}\n\nexport default computeLayout;\n"]}]}