{"remainingRequest":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js??ref--6-oneOf-1-1!/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js??ref--6-oneOf-1-2!/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js??ref--5-0!/Users/zhangtengjin/Desktop/byai/topology/src/demo/App.tsx","dependencies":[{"path":"/Users/zhangtengjin/Desktop/byai/topology/src/demo/App.tsx","mtime":1647506177136},{"path":"/Users/zhangtengjin/Desktop/byai/topology/package.json","mtime":1647506605470},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/cache-loader/dist/cjs.js","mtime":1645756501487},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js","mtime":1645756504722},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js","mtime":1641784542889},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js","mtime":1643179601592}],"contextDependencies":[],"result":["import _classCallCheck from\"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _possibleConstructorReturn from\"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}/* eslint-disable no-console */import React from'react';import{Topology,topologyWrapper,TemplateWrapper}from'../lib';import'./index.less';var Flow=/*#__PURE__*/function(_React$Component){_inherits(Flow,_React$Component);var _super=_createSuper(Flow);function Flow(){var _this;_classCallCheck(this,Flow);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={data:{lines:[{start:'1585466878859-0',end:'1585466718867',color:'#b71522'}],nodes:[{id:'1585466878859',name:'窄节点',content:'这是一个窄节点',branches:['锚点1'],position:{x:19726.906692504883,y:19512.21832561493},filterOverlap:true},{id:'1585466718867',name:'宽节点',content:'这是一个宽节点',branches:['锚点1','锚点2','锚点3'],position:{x:19629.79557800293,y:19696.197512626648},canDrag:false}]},readonly:false,overlap:false,showBar:true,canConnectMultiLines:false};_this.topology=null;_this.generatorNodeData=function(isBig){return{id:\"\".concat(Date.now()),name:isBig?'宽节点':'窄节点',content:isBig?'这是一个宽节点':'这是一个窄节点',branches:isBig?['锚点1','锚点2','锚点3']:['锚点1'],dragChild:isBig};};_this.handleSelect=function(data){console.log(data);};_this.renderTreeNode=function(data,_ref){var anchorDecorator=_ref.anchorDecorator;var _data$name=data.name,name=_data$name===void 0?'':_data$name,_data$content=data.content,content=_data$content===void 0?'':_data$content,_data$branches=data.branches,branches=_data$branches===void 0?[]:_data$branches;return/*#__PURE__*/React.createElement(\"div\",{className:\"topology-node\"},/*#__PURE__*/React.createElement(\"div\",{className:\"node-header\"},name),/*#__PURE__*/React.createElement(\"p\",{className:\"node-content\"},content),branches.length>0&&/*#__PURE__*/React.createElement(\"div\",{className:\"flow-node-branches-wrapper\"},branches.map(function(item,index){return anchorDecorator({anchorId:\"\".concat(index)})(/*#__PURE__*/React.createElement(\"div\",{className:\"flow-node-branch\"},item));})));};_this.onChange=function(data,type){_this.setState({data:data});console.log('data => type',data,type);};return _this;}_createClass(Flow,[{key:\"render\",value:function render(){var _this2=this;var _this$state=this.state,data=_this$state.data,readonly=_this$state.readonly,showBar=_this$state.showBar,overlap=_this$state.overlap,canConnectMultiLines=_this$state.canConnectMultiLines;var mockLineColor={0:'#82BEFF',1:'#FFA39E',2:'#FFC89E'};return/*#__PURE__*/React.createElement(\"div\",{className:\"topology\"},/*#__PURE__*/React.createElement(\"div\",{className:\"topology-templates\"},/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return _this2.setState({readonly:!readonly});},style:{marginBottom:20},type:\"button\"},readonly?'只读':'可编辑'),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return _this2.setState({overlap:!overlap});},style:{marginBottom:20},type:\"button\"},overlap?'不允许节点覆盖':'允许节点覆盖'),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){_this2.topology.handleSelectAll();},style:{marginBottom:20},type:\"button\"},\"\\u5168\\u9009\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return _this2.setState({showBar:!showBar});},style:{marginBottom:20},type:\"button\"},\"\".concat(showBar?'隐藏':'显示',\"\\u5DE5\\u5177\\u680F\")),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return _this2.setState({canConnectMultiLines:!canConnectMultiLines});},style:{marginBottom:20},type:\"button\"},\"\\u951A\\u70B9\".concat(canConnectMultiLines?'不可':'可',\"\\u8FDE\\u63A5\\u591A\\u6761\\u7EBF\")),/*#__PURE__*/React.createElement(TemplateWrapper,{generator:function generator(){return _this2.generatorNodeData(true);}},/*#__PURE__*/React.createElement(\"div\",{className:\"topology-templates-item\"},\"\\u5BBD\\u8282\\u70B9\")),/*#__PURE__*/React.createElement(TemplateWrapper,{generator:function generator(){return _this2.generatorNodeData(false);}},/*#__PURE__*/React.createElement(\"div\",{className:\"topology-templates-item\"},\"\\u7A84\\u8282\\u70B9\"))),/*#__PURE__*/React.createElement(\"div\",{style:{width:'100%',height:800}},/*#__PURE__*/React.createElement(Topology,{data:data,autoLayout:true,lineColor:mockLineColor,onChange:this.onChange,onSelect:this.handleSelect,renderTreeNode:this.renderTreeNode,readOnly:readonly,showBar:showBar,customPostionHeight:20,canConnectMultiLines:canConnectMultiLines,overlap:overlap,overlapOffset:{offsetX:30,offsetY:30},getInstance:// eslint-disable-next-line\nfunction getInstance(ins){_this2.topology=ins;}})));}}]);return Flow;}(React.Component);export default topologyWrapper(Flow);",{"version":3,"sources":["/Users/zhangtengjin/Desktop/byai/topology/src/demo/App.tsx"],"names":["React","Topology","topologyWrapper","TemplateWrapper","Flow","state","data","lines","start","end","color","nodes","id","name","content","branches","position","x","y","filterOverlap","canDrag","readonly","overlap","showBar","canConnectMultiLines","topology","generatorNodeData","isBig","Date","now","dragChild","handleSelect","console","log","renderTreeNode","anchorDecorator","length","map","item","index","anchorId","onChange","type","setState","mockLineColor","marginBottom","handleSelectAll","width","height","offsetX","offsetY","ins","Component"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\nimport { Topology, topologyWrapper, TemplateWrapper } from '../lib';\nimport { ITopologyNode, ITopologyData, IWrapperOptions } from '../lib/declare';\nimport './index.less';\n\ninterface FlowState {\n    data: ITopologyData;\n    readonly: boolean;\n    overlap?: boolean;\n    showBar?: boolean;\n    canConnectMultiLines?: boolean;\n}\nclass Flow extends React.Component<{}, FlowState> {\n    state: FlowState = {\n        data: {\n            lines: [\n                {\n                    start: '1585466878859-0',\n                    end: '1585466718867',\n                    color: '#b71522',\n                },\n            ],\n            nodes: [\n                {\n                    id: '1585466878859',\n                    name: '窄节点',\n                    content: '这是一个窄节点',\n                    branches: ['锚点1'],\n                    position: {\n                        x: 19726.906692504883,\n                        y: 19512.21832561493,\n                    },\n                    filterOverlap: true\n                },\n                {\n                    id: '1585466718867',\n                    name: '宽节点',\n                    content: '这是一个宽节点',\n                    branches: ['锚点1', '锚点2', '锚点3'],\n                    position: {\n                        x: 19629.79557800293,\n                        y: 19696.197512626648,\n                    },\n                    canDrag: false,\n                },\n            ],\n        },\n        readonly: false,\n        overlap: false,\n        showBar: true,\n        canConnectMultiLines: false\n    };\n    // eslint-disable-next-line\n    topology: any = null;\n\n    generatorNodeData = (isBig: boolean) => ({\n        id: `${Date.now()}`,\n        name: isBig ? '宽节点' : '窄节点',\n        content: isBig ? '这是一个宽节点' : '这是一个窄节点',\n        branches: isBig ? ['锚点1', '锚点2', '锚点3'] : ['锚点1'],\n        dragChild: isBig\n    });\n\n    handleSelect = (data: ITopologyData) => {\n        console.log(data);\n    }\n\n    renderTreeNode = (data: ITopologyNode, { anchorDecorator }: IWrapperOptions) => {\n        const {\n            name = '',\n            content = '',\n            branches = [],\n        } = data;\n        return (\n            <div className=\"topology-node\">\n                <div className=\"node-header\">{name}</div>\n                <p className=\"node-content\">{content}</p>\n                {branches.length > 0 && (\n                    <div className=\"flow-node-branches-wrapper\">\n                        {branches.map(\n                            (item: string, index: number) => anchorDecorator({\n                                anchorId: `${index}`,\n                            })(<div className=\"flow-node-branch\">{item}</div>),\n                        )}\n                    </div>\n                )}\n            </div>\n        );\n    };\n\n    onChange = (data: ITopologyData, type: string) => {\n        this.setState({ data });\n        console.log('data => type', data, type);\n    };\n\n    render() {\n        const {\n            data, readonly, showBar, overlap,\n            canConnectMultiLines\n        } = this.state;\n        const mockLineColor = {\n            0: '#82BEFF',\n            1: '#FFA39E',\n            2: '#FFC89E',\n        };\n        return (\n            <div className=\"topology\">\n                <div className=\"topology-templates\">\n                    <button\n                        onClick={() => this.setState({ readonly: !readonly })}\n                        style={{ marginBottom: 20 }}\n                        type=\"button\"\n                    >\n                        {readonly ? '只读' : '可编辑'}\n                    </button>\n                    <button\n                        onClick={() => this.setState({ overlap: !overlap })}\n                        style={{ marginBottom: 20 }}\n                        type=\"button\"\n                    >\n                        {overlap ? '不允许节点覆盖' : '允许节点覆盖'}\n                    </button>\n                    <button\n                        onClick={() => {\n                            this.topology.handleSelectAll();\n                        }}\n                        style={{ marginBottom: 20 }}\n                        type=\"button\"\n                    >\n                        全选\n                    </button>\n                    <button\n                        onClick={() => this.setState({ showBar: !showBar })}\n                        style={{ marginBottom: 20 }}\n                        type=\"button\"\n                    >\n                        {`${showBar ? '隐藏' : '显示'}工具栏`}\n                    </button>\n                    <button\n                        onClick={() => this.setState({ canConnectMultiLines: !canConnectMultiLines })}\n                        style={{ marginBottom: 20 }}\n                        type=\"button\"\n                    >\n                        {`锚点${canConnectMultiLines ? '不可' : '可'}连接多条线`}\n                    </button>\n                    <TemplateWrapper generator={() => this.generatorNodeData(true)}>\n                        <div className=\"topology-templates-item\">宽节点</div>\n                    </TemplateWrapper>\n                    <TemplateWrapper generator={() => this.generatorNodeData(false)}>\n                        <div className=\"topology-templates-item\">窄节点</div>\n                    </TemplateWrapper>\n                </div>\n                <div style={{ width: '100%', height: 800 }}>\n                    <Topology\n                        data={data}\n                        autoLayout\n                        lineColor={mockLineColor}\n                        onChange={this.onChange}\n                        onSelect={this.handleSelect}\n                        renderTreeNode={this.renderTreeNode}\n                        readOnly={readonly}\n                        showBar={showBar}\n                        customPostionHeight={20}\n                        canConnectMultiLines={canConnectMultiLines}\n                        overlap={overlap}\n                        overlapOffset={{\n                            offsetX: 30,\n                            offsetY: 30\n                        }}\n                        getInstance={\n                            // eslint-disable-next-line\n                            (ins: any) => { this.topology = ins; }}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default topologyWrapper(Flow);\n"]}]}