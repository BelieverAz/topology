{"remainingRequest":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js??ref--6-oneOf-1-1!/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js??ref--6-oneOf-1-2!/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js??ref--5-0!/Users/zhangtengjin/Desktop/byai/topology/src/lib/declare.ts","dependencies":[{"path":"/Users/zhangtengjin/Desktop/byai/topology/src/lib/declare.ts","mtime":1647506177150},{"path":"/Users/zhangtengjin/Desktop/byai/topology/package.json","mtime":1647506605470},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/cache-loader/dist/cjs.js","mtime":1645756501487},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js","mtime":1645756504722},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js","mtime":1641784542889},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js","mtime":1643179601592}],"contextDependencies":[],"result":["export var ChangeType;(function(ChangeType){ChangeType[ChangeType[\"ADD_NODE\"]=0]=\"ADD_NODE\";ChangeType[ChangeType[\"ADD_LINE\"]=1]=\"ADD_LINE\";ChangeType[ChangeType[\"LAYOUT\"]=2]=\"LAYOUT\";ChangeType[ChangeType[\"DELETE\"]=3]=\"DELETE\";ChangeType[ChangeType[\"EDIT_LINE\"]=4]=\"EDIT_LINE\";ChangeType[ChangeType[\"EDIT_NODE\"]=5]=\"EDIT_NODE\";})(ChangeType||(ChangeType={}));export var NodeTypes;(function(NodeTypes){NodeTypes[\"NORMAL_NODE\"]=\"\\u666E\\u901A\\u8282\\u70B9\";NodeTypes[\"TEMPLATE_NODE\"]=\"\\u6A21\\u677F\\u8282\\u70B9\";NodeTypes[\"ANCHOR\"]=\"\\u951A\\u70B9\";NodeTypes[\"LINE_POINT\"]=\"\\u7EBF\\u6BB5\\u70B9\";})(NodeTypes||(NodeTypes={}));export var KeyCode;/** 选中元素类型 */(function(KeyCode){KeyCode[KeyCode[\"BACKSPACE\"]=8]=\"BACKSPACE\";KeyCode[KeyCode[\"DELETE\"]=46]=\"DELETE\";})(KeyCode||(KeyCode={}));export var SelectedType;/** 编辑类型\n * ADD: 新增\n * EDIT_START: 编辑起点\n * EDIT_END: 编辑终点\n */(function(SelectedType){SelectedType[SelectedType[\"NODE\"]=0]=\"NODE\";SelectedType[SelectedType[\"LINE\"]=1]=\"LINE\";SelectedType[SelectedType[\"NONE\"]=2]=\"NONE\";})(SelectedType||(SelectedType={}));export var LineEditType;(function(LineEditType){LineEditType[\"ADD\"]=\"add\";LineEditType[\"EDIT_START\"]=\"start\";LineEditType[\"EDIT_END\"]=\"end\";})(LineEditType||(LineEditType={}));",{"version":3,"sources":["/Users/zhangtengjin/Desktop/byai/topology/src/lib/declare.ts"],"names":["ChangeType","NodeTypes","KeyCode","SelectedType","LineEditType"],"mappings":"AAEA,UAAYA,CAAAA,UAAZ,C,UAAYA,U,EAAAA,U,CAAAA,U,2BAAAA,U,CAAAA,U,2BAAAA,U,CAAAA,U,uBAAAA,U,CAAAA,U,uBAAAA,U,CAAAA,U,6BAAAA,U,CAAAA,U,gCAAAA,U,GAAAA,U,MASZ,UAAYC,CAAAA,SAAZ,C,UAAYA,S,EAAAA,S,2CAAAA,S,6CAAAA,S,0BAAAA,S,uCAAAA,S,GAAAA,S,MAOZ,UAAYC,CAAAA,OAAZ,CAIA,a,UAJYA,O,EAAAA,O,CAAAA,O,6BAAAA,O,CAAAA,O,2BAAAA,O,GAAAA,O,MAKZ,UAAYC,CAAAA,YAAZ,CAMA;AACA;AACA;AACA;AACA,G,UAVYA,Y,EAAAA,Y,CAAAA,Y,mBAAAA,Y,CAAAA,Y,mBAAAA,Y,CAAAA,Y,sBAAAA,Y,GAAAA,Y,MAWZ,UAAYC,CAAAA,YAAZ,C,UAAYA,Y,EAAAA,Y,cAAAA,Y,uBAAAA,Y,sBAAAA,Y,GAAAA,Y","sourcesContent":["import { ReactNode } from 'react';\n\nexport enum ChangeType {\n    'ADD_NODE',\n    'ADD_LINE',\n    'LAYOUT',\n    'DELETE',\n    'EDIT_LINE',\n    'EDIT_NODE',\n}\n\nexport enum NodeTypes {\n    NORMAL_NODE = '普通节点',\n    TEMPLATE_NODE = '模板节点',\n    ANCHOR = '锚点',\n    LINE_POINT = '线段点'\n}\n\nexport enum KeyCode {\n    BACKSPACE = 8,\n    DELETE = 46,\n}\n/** 选中元素类型 */\nexport enum SelectedType {\n    NODE,\n    LINE,\n    NONE,\n}\n\n/** 编辑类型\n * ADD: 新增\n * EDIT_START: 编辑起点\n * EDIT_END: 编辑终点\n */\nexport enum LineEditType {\n    ADD = 'add',\n    EDIT_START = 'start',\n    EDIT_END = 'end',\n}\n\nexport interface IPosition {\n    x: number;\n    y: number;\n}\n\nexport interface ITopologyNode {\n    id: string;\n    position?: IPosition;\n    canDrag?: boolean; // 控制节点是否可拖拽\n    dragChild?: boolean; // 设置当前节点下的子节点是否需要联动拖动\n    filterOverlap?: boolean; // 控制节点在设置 overlap 为 true 时是否仍允许被覆盖\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [prop: string]: any;\n}\n\nexport interface ITopologyLine {\n    start: string;\n    end: string;\n    color?: string;\n}\n\nexport interface ITopologyContext {\n    linking: boolean;\n    impactNode: string | null;\n    readOnly: boolean;\n    hoverCurrentNode: ITopologyNode;\n    activeLine: {\n        start: IPosition;\n        end: IPosition;\n        type: LineEditType;\n        /** 原始值 */\n        origin: ITopologyLine | null;\n    } | null;\n    selectedData: {\n        nodes: ITopologyNode[];\n        lines: ITopologyLine[];\n    };\n}\n\nexport interface ITopologyData {\n    nodes: ITopologyNode[];\n    lines: ITopologyLine[];\n}\n\nexport interface IWrapperOptions {\n    anchorDecorator: (options: { anchorId?: string }) => (item: ReactNode) => ReactNode;\n}\n\nexport type ValuesOf<T> = {\n    [P in keyof T]?: T[P];\n};\n"]}]}